/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as VaultVaultIdImport } from './routes/vault.$vaultId'
import { Route as AuthCallbackImport } from './routes/auth.callback'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const VaultVaultIdRoute = VaultVaultIdImport.update({
  id: '/vault/$vaultId',
  path: '/vault/$vaultId',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackRoute = AuthCallbackImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackImport
      parentRoute: typeof rootRoute
    }
    '/vault/$vaultId': {
      id: '/vault/$vaultId'
      path: '/vault/$vaultId'
      fullPath: '/vault/$vaultId'
      preLoaderRoute: typeof VaultVaultIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/vault/$vaultId': typeof VaultVaultIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/vault/$vaultId': typeof VaultVaultIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/vault/$vaultId': typeof VaultVaultIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/callback' | '/vault/$vaultId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/callback' | '/vault/$vaultId'
  id: '__root__' | '/' | '/auth/callback' | '/vault/$vaultId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  VaultVaultIdRoute: typeof VaultVaultIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  VaultVaultIdRoute: VaultVaultIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/callback",
        "/vault/$vaultId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/callback": {
      "filePath": "auth.callback.tsx"
    },
    "/vault/$vaultId": {
      "filePath": "vault.$vaultId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
